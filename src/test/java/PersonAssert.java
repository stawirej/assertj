
import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Person} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PersonAssert extends AbstractAssert<PersonAssert, Person> {

    /**
     * Creates a new <code>{@link PersonAssert}</code> to make assertions on actual Person.
     * 
     * @param actual the Person we want to make assertions on.
     */
    public PersonAssert(final Person actual) {
        super(actual, PersonAssert.class);
    }

    /**
     * An entry point for PersonAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one can write directly: <code>assertThat(myPerson)</code> and get specific assertion with code
     * completion.
     * 
     * @param actual the Person we want to make assertions on.
     * @return a new <code>{@link PersonAssert}</code>
     */
    public static PersonAssert assertThat(final Person actual) {
        return new PersonAssert(actual);
    }

    /**
     * Verifies that the actual Person's age is equal to the given one.
     * 
     * @param age the given age to compare the actual Person's age to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Person's age is not equal to the given one.
     */
    public PersonAssert hasAge(final Integer age) {
        // check that actual Person we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        final String assertjErrorMessage = "\nExpecting age of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        final Integer actualAge = actual.getAge();
        if (!Objects.areEqual(actualAge, age)) {
            failWithMessage(assertjErrorMessage, actual, age, actualAge);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Person's friends is equal to the given one.
     * 
     * @param friends the given friends to compare the actual Person's friends to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Person's friends is not equal to the given one.
     */
    public PersonAssert hasFriends(final Persons friends) {
        // check that actual Person we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        final String assertjErrorMessage = "\nExpecting friends of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        final Persons actualFriends = actual.getFriends();
        if (!Objects.areEqual(actualFriends, friends)) {
            failWithMessage(assertjErrorMessage, actual, friends, actualFriends);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual Person's name is equal to the given one.
     * 
     * @param name the given name to compare the actual Person's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Person's name is not equal to the given one.
     */
    public PersonAssert hasName(final String name) {
        // check that actual Person we want to make assertions on is not null.
        isNotNull();

        // overrides the default error message with a more explicit one
        final String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

        // null safe check
        final String actualName = actual.getName();
        if (!Objects.areEqual(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName);
        }

        // return the current assertion for method chaining
        return this;
    }

}
